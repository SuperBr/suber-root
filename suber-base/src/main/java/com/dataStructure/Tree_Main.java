package com.dataStructure;

/**
 * @author wangyongchao
 * @date 2019/2/18  10:14
 */
public class Tree_Main {


}
/*
*
* 1:数组：地址连续，大小固定。
*
* 2：链表：链表是一种物理存储单元上非连续、非顺序的存储结构，
* 数据元素的逻辑顺序是通过链表中的指针链接次序实现的。
* 链表由一系列节点组成，这些节点不必在内存中相连。
* 每个节点由数据部分Data和链部分Next，Next指向下一个节点，这样当添加或者删除时，只需要改变相关节点的Next的指向，效率很高。
* 3：tree
*  3.1：
*   BST树

       即二叉搜索树：

       1.所有非叶子结点至多拥有两个儿子（Left和Right）；

       2.所有结点存储一个关键字；

       3.非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；

       BST树的搜索，从根结点开始，如果查询的关键字与结点的关键字相等，那么就命中；

       否则，如果查询关键字比结点关键字小，就进入左儿子；如果比结点关键字大，就进入

       右儿子；如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；

              如果BST树的所有非叶子结点的左右子树的结点数目均保持差不多（平衡），那么B树

       的搜索性能逼近二分查找；但它比连续内存空间的二分查找的优点是，改变BST树结构

（插入与删除结点）不需要移动大段的内存数据，甚至通常是常数开销；
*
    3.2 * AVL平衡二叉搜索树
     定义：平衡二叉树或为空树,或为如下性质的二叉排序树:
       （1）左右子树深度之差的绝对值不超过1;
       （2）左右子树仍然为平衡二叉树.
     平衡因子BF=左子树深度－右子树深度.
     平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。


    3.3：

    RBT 红黑树
    AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；
    红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；
    所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。
    红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。
    一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：
    1）每个结点要么是红的，要么是黑的。
    2）根结点是黑的。
    3）每个叶结点，即空结点（NIL）是黑的。
    4）如果一个结点是红的，那么它的俩个儿子都是黑的。
    5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。

    3.4：

    B-树

       是一种平衡多路搜索树（并不是二叉的）：
       1.定义任意非叶子结点最多只有M个儿子；且M>2；
       2.根结点的儿子数为[2, M]；
       3.除根结点以外的非叶子结点的儿子数为[M/2, M]；
       4.每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）
       5.非叶子结点的关键字个数=指向儿子的指针个数-1；
       6.非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] < K[i+1]；
       7.非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的
子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；
       8.所有叶子结点位于同一层；

       B-树的特性：

       1.关键字集合分布在整颗树中；

       2.任何一个关键字出现且只出现在一个结点中；

       3.搜索有可能在非叶子结点结束；

       4.其搜索性能等价于在关键字全集内做一次二分查找；

       5.自动层次控制；


    3.5：

    B+树

       B+树是B-树的变体，也是一种多路搜索树：

       1.其定义基本与B-树同，除了：

       2.非叶子结点的子树指针与关键字个数相同；

       3.非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树

（B-树是开区间）；

       5.为所有叶子结点增加一个链指针；

       6.所有关键字都在叶子结点出现；


      B+树

       是B-树的变体，也是一种多路搜索树：

       1.其定义基本与B-树同，除了：

       2.非叶子结点的子树指针与关键字个数相同；

       3.非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树

（B-树是开区间）；

       5.为所有叶子结点增加一个链指针；

       6.所有关键字都在叶子结点出现；
*
*
* */